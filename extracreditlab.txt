//Write a recursive solution to solve the Partition problem.
//
//Partition: Given a set A of n integers a 1, a 2, …, a n, can you find a subset A 1 of integers such that the sum
//
//	of the integers in A 1 is half of the sum of all the n integers(that is, ) ?
//
//	Input :
//
//	1. Number of integers of set A : n
//
//	2. n integers : a 1, a 2, …, a n .
//
//	Output :
//
//	Print out yes if you can find a subset A 1 of integers such that the sum of the integers in A 1 is half of the
//
//	sum of all the n integers(that is, ); otherwise, print out no.
//
//	Test your program with the following two instances :
//
//1) 5 integers: 5, 10, 6, 8, 1
//
//2) 20 integers: 1, 5, 7, 34, 76, 54, 23, 19, 22, 81, 44, 77, 29, 40, 11, 42, 43, 31, 57, 61

#include <iostream>
using namespace std;


int Partition(int *a, int sum, int i,int count);
void main()

{
	
	int size;
	
	cout << "please enter the size of your set";
	cin >> size;

	int *a = new int[size];
	int sum = 0;

	for (int i = 0; i < size; i++)
	{
		
		cout << "enter your elements" << endl;
		cin >> a[i];
		sum += a[i];


	}
	
	cout << sum << endl;
	Partition( a, sum,(0),0);

	
}










int Partition(int *a, int sum, int index, int count)
{

	if (count > (sum / 2))
	{
		cout << "no";
		return count;
		


	}

	if (count == (sum / 2))
	{
		cout << "yes";
		return count;
		
	}
	
	 if (count < (sum / 2))
	{
		return Partition(a, sum, index + 1, count + a[index]);


	}

}



